input {
  stdin {
    type => "stdin-type"
  }
  file {
    type => "log"
    path => [ "__prefix__*/*/*.log" ]
  }
  file {
    type => "udp_statsd"
    path => [ "__prefix__*output/udp_statsd_*" ]
  }
  file {
    type => "http"
    path => [ "__prefix__*output/http_*" ]
  }
  file {
    type => "stdout"
    path => [ "__prefix__*output/stdout" ]
  }
  file {
    type => "stderr"
    path => [ "__prefix__*output/stderr" ]
  }
}

filter {
  grok {
    add_tag => [ "%{testcase}" ]
    match => [ "@source_path", "__prefix__-%{TEST_ID:testcase}(-output)?/" ]
  }
  grok {
    type => "log"
    match => [ "@message", "%{TIMESTAMP_ISO8601:logdate}.*" ]
  }
  grok {
    type => "stdout"
    match => [ "@message", "%{TIMESTAMP_ISO8601:logdate}.*" ]
  }
  grok {
    type => "stderr"
    match => [ "@message", "%{TIMESTAMP_ISO8601:logdate}.*" ]
  }
  grok {
    type => "udp_statsd"
    match => [ "@message", "%{TIME:logtime} .*" ]
  }
  grok {
    type => "http"
    match => [ "@message", "%{DATESTAMP:logdate}" ]
  }
  date {
    type => "log"
    logdate => "ISO8601"
  }
  date {
    type => "stdout"
    logdate => "ISO8601"
  }
  date {
    type => "stderr"
    logdate => "ISO8601"
  }
  date {
    type => "udp_statsd"
    logtime => "HH:mm:ss.SSSSSS"
  }
  date {
    type => "http"
    logdate => "yyyy/MM/dd HH:mm:ss.SSSSSS"
  }
  multiline {
    type => "http"
    pattern => "T ..../../.. ..:..:...[0-9]{6} [[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}:[[:digit:]]+ -> [[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}:[[:digit:]]+ \[AP\]$"
    negate => true
    what => "previous"
  }
  multiline {
    type => "udp_statsd"
    pattern => "^[^ ]+ IP [[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]+ > [[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]+: UDP, length [0-9]+$"
    negate => true
    what => "previous"
  }
}

output {
  stdout { }
  elasticsearch { embedded => true }
}
